{
	// Place your Sugoroku ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"c source": {
		"isFileTemplate": true,
		"scope": "c",
		"prefix": ".c",
		"body": [
			"/* Includes ------------------------------------------------------------------*/",
			"/* Private typedef -----------------------------------------------------------*/",
			"/* Private define ------------------------------------------------------------*/",
			"/* Private macro -------------------------------------------------------------*/",
			"/* Private variables ---------------------------------------------------------*/",
			"/* Private function prototypes -----------------------------------------------*/",
			"/* Private functions ---------------------------------------------------------*/"
		],
		"description": "C source file template"
	},
	"c header": {
		"isFileTemplate": true,
		"scope": "c",
		"prefix": ".h",
		"body": [
			"/* Define to prevent recursive inclusion -------------------------------------*/",
			"#pragma once",
			"/* Includes ------------------------------------------------------------------*/",
			"#ifdef __cplusplus",
			"extern \"C\" {",
			"#endif",
			"/* Exported types ------------------------------------------------------------*/",
			"/* Exported constants --------------------------------------------------------*/",
			"/* Exported macro ------------------------------------------------------------*/",
			"/* Exported functions ------------------------------------------------------- */",
			"#ifdef __cplusplus",
			"}",
			"#endif"
		],
		"description": "C header file template"
	},
	"cpp source": {
		"isFileTemplate": true,
		"scope": "cpp",
		"prefix": ".cpp",
		"body": [
			"/* Includes ------------------------------------------------------------------*/",
			"/* Private typedef -----------------------------------------------------------*/",
			"/* Private define ------------------------------------------------------------*/",
			"/* Private macro -------------------------------------------------------------*/",
			"/* Private variables ---------------------------------------------------------*/",
			"/* Private function prototypes -----------------------------------------------*/",
			"/* Private functions ---------------------------------------------------------*/"
		],
		"description": "Cpp source file template"
	},
	"cpp header": {
		"isFileTemplate": true,
		"scope": "cpp",
		"prefix": ".hpp",
		"body": [
			"/* Define to prevent recursive inclusion -------------------------------------*/",
			"#pragma once",
			"/* Includes ------------------------------------------------------------------*/",
			"/* Exported types ------------------------------------------------------------*/",
			"/* Exported constants --------------------------------------------------------*/",
			"/* Exported macro ------------------------------------------------------------*/",
			"/* Exported functions ------------------------------------------------------- */"
		],
		"description": "Cpp header file template"
	}
}